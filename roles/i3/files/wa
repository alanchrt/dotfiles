#!/bin/env bash

# Copied from https://github.com/ASzc/tungsten
# But reworked to loop for query input (to be used with rlwrap)

set -euo pipefail

error () {
    echo "$@" >&2
}

#
# Load stored API key
#

key_path="$HOME/.wolfram_api_key"
key_pattern='[A-Z0-9]{6}-[A-Z0-9]{10}'

if ! [ -v WOLFRAM_API_KEY ]
then
    if [ -f "$key_path" ]
    then
        # Load the contents of $key_path file as WOLFRAM_API_KEY
        WOLFRAM_API_KEY="$(<"$key_path")"
        if ! [[ "$WOLFRAM_API_KEY" =~ $key_pattern ]]
        then
            error "WolframAlpha API key read from file '$key_path' doesn't match the validation pattern"
            exit 2
        fi

    elif [ -e "$key_path" ]
    then
        error "WolframAlpha API key path '$key_path' exists, but isn't a file."
        exit 3

    else
        WOLFRAM_API_KEY=""
    fi
fi

#
# Read the query
#

while read query; do
    if [ -z "$query" ]
    then
        error "You must specify a query to make"
        exit 5
    fi

    #
    # Perform the query
    #
    curl_args=(
        -sSf -G
        --data-urlencode "output=JSON"
        --data-urlencode "format=plaintext"
        --data-urlencode "input=$query"
    )
    if [ -n "$WOLFRAM_API_KEY" ]
    then
        curl_args+=(
            --data-urlencode "appid=$WOLFRAM_API_KEY"
            "https://api.wolframalpha.com/v2/query"
        )
        iconv_from="UTF-8"
    else
        error "Querying without an API key. There may be incorrect / missing characters."
        error "To query with an API key, add the key to $key_path as described in the README"
        curl_args+=(
            --data-urlencode "type=full"
            -e "https://products.wolframalpha.com/api/explorer/"
            "https://www.wolframalpha.com/input/apiExplorer.jsp"
        )
        iconv_from="ISO-8859-1"
    fi
    result="$(curl "${curl_args[@]}" | iconv -f "$iconv_from" -t UTF-8)"

    #
    # Process the result of the query
    #

    query_result () {
        set -euo pipefail
        jq -r "$1" <<<"$result"
    }

    # Handle error results
    if [ "$(query_result '.queryresult.error')" != "false" ]
    then
        error_msg="$(query_result '.queryresult.error.msg')"

        if [ "$error_msg" = "Invalid appid" ]
        then
            error "WolframAlpha API rejected the given API key"
            error "Modify or remove the key stored in file '$key_path'"
            exit 6
        else
            error "WolframAlpha API returned an error: $error_msg"
            exit 7
        fi
    fi

    # Only colourise if stdout is a terminal
    if [ -t 1 ]
    then
        titleformat='\e[1;34m%s\e[m\n'
    else
        titleformat='%s\n'
    fi

    # Print title+plaintext for each pod with text in it's subpod/plaintext child
    while read -r title
    do
        printf "$titleformat" "$title"

        # Process the >0 plaintext elements decendent of the current pod
        query_result ".queryresult.pods[] | select(.title == \"$title\") | .subpods[].plaintext"
    done < <(query_result '.queryresult.pods[] | select(.subpods[0].plaintext != "") | .title')

    # Newline
    echo
done
